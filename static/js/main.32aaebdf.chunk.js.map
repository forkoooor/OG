{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","claim","colorApplication","color","state","contract","methods","send","from","account","once","receipt","setState","colors","concat","toConsumableArray","totalSupply","loadWeb3","loadBlockchainData","window","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","OGColor","networks","abi","address","Contract","getColors","colorsForAddress","i","_this2","react_default","a","createElement","className","href","target","rel","id","role","onSubmit","event","preventDefault","value","type","placeholder","ref","input","map","key","style","backgroundColor","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32aaebdf.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Web3 from 'web3'\r\nimport './App.css'\r\nimport OGColor from '../abis/OGColor.json'\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask.')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = OGColor.networks[networkId]\r\n    if (networkData) {\r\n      const abi = OGColor.abi\r\n      const address = networkData.address\r\n      const contract = new web3.eth.Contract(abi, address)\r\n      this.setState({ contract })\r\n      const totalSupply = await contract.methods.totalSupply().call()\r\n      this.setState({ totalSupply })\r\n      const colorsForAddress = await contract.methods.getColors(address, 0).call()\r\n      // Load Colors\r\n      for (var i = 0; i < 4; i++) {\r\n        this.setState({\r\n          colors: [...this.state.colors, colorsForAddress[i]]\r\n        })\r\n      }\r\n    } else {\r\n      window.alert('Smart contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  claim = (colorApplication, color) => {\r\n    this.state.contract.methods.claim(colorApplication, color).send({ from: this.state.account })\r\n      .once('receipt', (receipt) => {\r\n        this.setState({\r\n          colors: [...this.state.colors, color]\r\n        })\r\n      })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      contract: null,\r\n      totalSupply: 0,\r\n      colors: []\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"https://nfttank.github.io/OG/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            OG Colors\r\n          </a>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-white\"><span id=\"account\">{this.state.account}</span></small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <h1>Issue Token</h1>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const color = this.color.value\r\n                  const colorApplication = this.colorApplication.value\r\n                  this.claim(colorApplication, color)\r\n                }}>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder='e.g. back'\r\n                    ref={(input) => { this.colorApplication = input }}\r\n                  />\r\n                  <input\r\n                    type='text'\r\n                    className='form-control mb-1'\r\n                    placeholder='e.g. #FFFFFF'\r\n                    ref={(input) => { this.color = input }}\r\n                  />\r\n                  <input\r\n                    type='submit'\r\n                    className='btn btn-block btn-primary'\r\n                    value='claim'\r\n                  />\r\n                </form>\r\n              </div>\r\n            </main>\r\n          </div>\r\n          <hr />\r\n          <div className=\"row text-center\">\r\n            {this.state.colors.map((color, key) => {\r\n              return (\r\n                <div key={key} className=\"col-md-3 mb-3\">\r\n                  <div className=\"token\" style={{ backgroundColor: color }}></div>\r\n                  <div>{color}</div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}